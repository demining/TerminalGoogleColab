# -*- coding: utf-8 -*-
"""Terminal_CryptoDeepTech.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/180hC1ndp2fNQH7XBZiayOBqeWytqKi8m
"""

from google.colab import drive
drive.mount('/content/drive/')

cd drive/MyDrive/

# Commented out IPython magic to ensure Python compatibility.
# #@title JS Shell
# %%html
# <div id=term_demo></div>
# <script src="https://code.jquery.com/jquery-latest.js"></script>
# <script src="https://cdn.jsdelivr.net/npm/jquery.terminal/js/jquery.terminal.min.js"></script>
# <link href="https://cdn.jsdelivr.net/npm/jquery.terminal/css/jquery.terminal.min.css" rel="stylesheet"/>
# <script>
#   $('#term_demo').terminal(function(command) {
#       if (command !== '') {
#           try {
#               var result = window.eval(command);
#               if (result !== undefined) {
#                   this.echo(new String(result));
#               }
#           } catch(e) {
#               this.error(new String(e));
#           }
#       } else {
#           this.echo('');
#       }
#   }, {
#       greetings: 'Welcome to JavaScript Shell',
#       name: 'js_demo',
#       height: 200,
#       prompt: 'js> '
#   });

#@title IPython.display
from IPython.display import JSON
from google.colab import output
from subprocess import getoutput
import os

def shell(command):
  if command.startswith('cd'):
    path = command.strip().split(maxsplit=1)[1]
    os.chdir(path)
    return JSON([''])
  return JSON([getoutput(command)])
output.register_callback('shell', shell)

# Commented out IPython magic to ensure Python compatibility.
# #@title Terminal CryptoDeepTech
# %%html
# <div id=term_demo></div>
# <script src="https://code.jquery.com/jquery-latest.js"></script>
# <script src="https://cdn.jsdelivr.net/npm/jquery.terminal/js/jquery.terminal.min.js"></script>
# <link href="https://cdn.jsdelivr.net/npm/jquery.terminal/css/jquery.terminal.min.css" rel="stylesheet"/>
# <script>
#   $('#term_demo').terminal(async function(command) {
#       if (command !== '') {
#           try {
#               let res = await google.colab.kernel.invokeFunction('shell', [command])
#               let out = res.data['application/json'][0]
#               this.echo(new String(out))
#           } catch(e) {
#               this.error(new String(e));
#           }
#       } else {
#           this.echo('');
#       }
#   }, {
#       greetings: 'Terminal CryptoDeepTech',
#       name: 'colab_demo',
#       height: 320,
#       prompt: 'crypto > '
#   });

